// Code generated by MockGen. DO NOT EDIT.
// Source: ../platuned/client/go/management_rpc_grpc.pb.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	v2 "github.com/aschey/platune/client"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementClient is a mock of ManagementClient interface.
type MockManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementClientMockRecorder
}

// MockManagementClientMockRecorder is the mock recorder for MockManagementClient.
type MockManagementClientMockRecorder struct {
	mock *MockManagementClient
}

// NewMockManagementClient creates a new mock instance.
func NewMockManagementClient(ctrl *gomock.Controller) *MockManagementClient {
	mock := &MockManagementClient{ctrl: ctrl}
	mock.recorder = &MockManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementClient) EXPECT() *MockManagementClientMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockManagementClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (v2.Management_SyncClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(v2.Management_SyncClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockManagementClientMockRecorder) Sync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManagementClient)(nil).Sync), varargs...)
}

// MockManagement_SyncClient is a mock of Management_SyncClient interface.
type MockManagement_SyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SyncClientMockRecorder
}

// MockManagement_SyncClientMockRecorder is the mock recorder for MockManagement_SyncClient.
type MockManagement_SyncClientMockRecorder struct {
	mock *MockManagement_SyncClient
}

// NewMockManagement_SyncClient creates a new mock instance.
func NewMockManagement_SyncClient(ctrl *gomock.Controller) *MockManagement_SyncClient {
	mock := &MockManagement_SyncClient{ctrl: ctrl}
	mock.recorder = &MockManagement_SyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SyncClient) EXPECT() *MockManagement_SyncClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockManagement_SyncClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockManagement_SyncClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockManagement_SyncClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockManagement_SyncClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SyncClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SyncClient)(nil).Context))
}

// Header mocks base method.
func (m *MockManagement_SyncClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockManagement_SyncClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockManagement_SyncClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockManagement_SyncClient) Recv() (*v2.Progress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v2.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockManagement_SyncClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockManagement_SyncClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SyncClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SyncClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SyncClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SyncClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SyncClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SyncClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockManagement_SyncClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockManagement_SyncClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockManagement_SyncClient)(nil).Trailer))
}

// MockManagementServer is a mock of ManagementServer interface.
type MockManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServerMockRecorder
}

// MockManagementServerMockRecorder is the mock recorder for MockManagementServer.
type MockManagementServerMockRecorder struct {
	mock *MockManagementServer
}

// NewMockManagementServer creates a new mock instance.
func NewMockManagementServer(ctrl *gomock.Controller) *MockManagementServer {
	mock := &MockManagementServer{ctrl: ctrl}
	mock.recorder = &MockManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServer) EXPECT() *MockManagementServerMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockManagementServer) Sync(arg0 *emptypb.Empty, arg1 v2.Management_SyncServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockManagementServerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManagementServer)(nil).Sync), arg0, arg1)
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockUnsafeManagementServer is a mock of UnsafeManagementServer interface.
type MockUnsafeManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementServerMockRecorder
}

// MockUnsafeManagementServerMockRecorder is the mock recorder for MockUnsafeManagementServer.
type MockUnsafeManagementServerMockRecorder struct {
	mock *MockUnsafeManagementServer
}

// NewMockUnsafeManagementServer creates a new mock instance.
func NewMockUnsafeManagementServer(ctrl *gomock.Controller) *MockUnsafeManagementServer {
	mock := &MockUnsafeManagementServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementServer) EXPECT() *MockUnsafeManagementServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockUnsafeManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockUnsafeManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockUnsafeManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockManagement_SyncServer is a mock of Management_SyncServer interface.
type MockManagement_SyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SyncServerMockRecorder
}

// MockManagement_SyncServerMockRecorder is the mock recorder for MockManagement_SyncServer.
type MockManagement_SyncServerMockRecorder struct {
	mock *MockManagement_SyncServer
}

// NewMockManagement_SyncServer creates a new mock instance.
func NewMockManagement_SyncServer(ctrl *gomock.Controller) *MockManagement_SyncServer {
	mock := &MockManagement_SyncServer{ctrl: ctrl}
	mock.recorder = &MockManagement_SyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SyncServer) EXPECT() *MockManagement_SyncServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockManagement_SyncServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SyncServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SyncServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SyncServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SyncServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SyncServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockManagement_SyncServer) Send(arg0 *v2.Progress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockManagement_SyncServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManagement_SyncServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockManagement_SyncServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockManagement_SyncServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockManagement_SyncServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SyncServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SyncServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SyncServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockManagement_SyncServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockManagement_SyncServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockManagement_SyncServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockManagement_SyncServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockManagement_SyncServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockManagement_SyncServer)(nil).SetTrailer), arg0)
}
