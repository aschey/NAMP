// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package platune

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_SyncClient, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], "/management_rpc.Management/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_SyncClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type managementSyncClient struct {
	grpc.ClientStream
}

func (x *managementSyncClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	Sync(*emptypb.Empty, Management_SyncServer) error
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) Sync(*emptypb.Empty, Management_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).Sync(m, &managementSyncServer{stream})
}

type Management_SyncServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type managementSyncServer struct {
	grpc.ServerStream
}

func (x *managementSyncServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management_rpc.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Management_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management_rpc.proto",
}
